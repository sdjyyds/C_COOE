//树的一些列操作
#include<stdio.h>
#include<stdlib.h>
#define MaxSize 100
typedef char DataType; 
//1.树的表示方法 二叉链表，孩子兄弟表示法，孩子链表表示法，双亲表示法
//1.二叉链表表示法
typedef struct node1{
	DataType Data;
	struct node1 *lchild,*rchild;
}BTree;
//2.孩子兄弟表示法 
typedef struct node2{
	DataType Data;
	struct node1 *child,*brother;
}BTree1; 
//3.孩子链表表示法
typedef struct node3{
	int address;
	struct node3 *next;
}ChildNode;
typedef struct node4{
	DataType Data;
	ChildNode *FirstChildren;
}Head;
Head t[MaxSize];
//4.双亲表示法
typedef struct node5{
	DataType Data[MaxSize];
	int parent;
}PType[MaxSize];

//2.树的初始化（以二叉链表建立的树为例） 
BTree* Create_Tree()
{
	char ch1;
	scanf("%c",&ch1);
	getchar();
	if(ch1=='#')
	{
		return NULL;
	}
	else
	{
		BTree* Tree=(BTree*)malloc(sizeof(BTree));
		Tree->Data=ch1;
		printf("请输入%c的左孩子：",Tree->Data);
		Tree->lchild=Create_Tree();
		printf("请输入%c的右孩子：",Tree->Data);
		Tree->rchild=Create_Tree(); 
	}
}

//3.遍历二叉树 
//1.先序遍历（根）DLR
void prior_Tree(BTree *T)
{
	if(T==NULL) return;
	printf("%c ",T->Data);
	prior_Tree(T->lchild),prior_Tree(T->rchild);
} 
//2.中序遍历（根）LDR
void InOrderTree(BTree *T)
{
	if(T==NULL) return;
	InOrderTree(T->lchild);
	printf("%c ",T->Data);
	InOrderTree(T->rchild); 
} 
//3.后序遍历（根）LRD
void PostOrder(BTree *T)
{
	if(T==NULL) return;
	PostOrder(T->lchild),PostOrder(T->rchild);
	printf("%c ",T->Data);
}
//4.层次遍历//队列 
void LevelOrderTree(BTree *T)
{
	int l=0,r=1;
	BTree *p,*q[MaxSize];
	q[l]=T;
	while(l!=r)
	{
		p=q[l];
		if(p->lchild!=NULL)
		{
			q[r]=p->lchild;
			r=(r+1)%MaxSize;
		}
		if(p->rchild!=NULL)
		{
			q[r]=p->rchild;
			r=(r+1)%MaxSize;
		}
		printf("%c ",q[l]->Data);
		l=(l+1)%MaxSize;
	}
} 
int count1,count2,count3;
//4.统计叶子结点的个数
void leaf_num(BTree *T)
{
	if(T==NULL) return;
	if(T->lchild==NULL&&T->rchild==NULL) count2++;
	leaf_num(T->lchild),leaf_num(T->rchild);
}
//5.统计树的深度
int Deap_num(BTree *T)
{
	int l,r;
	if(T==NULL) return 0;
	l=Deap_num(T->lchild);
	r=Deap_num(T->rchild);
	if(l>r) return l+1;
	else	return r+1;
}
//6.统计所有的结点个数
void Node_num(BTree *T)
{
	if(T==NULL) return;
	count1++;
	Node_num(T->lchild),Node_num(T->rchild);
}
//7.广义表示法输出二叉树
void Show_BTree(BTree *T)
{
	if(T!=NULL)
	{
		printf("%c",T->Data);
		if(T->lchild!=NULL)
		{
			printf("(");
			Show_BTree(T->lchild);
			if(T->rchild!=NULL)  printf(","),Show_BTree(T->rchild);
			printf(")");
		}
		else if(T->rchild!=NULL)
		{
			printf("(");
			Show_BTree(T->lchild);
			if(T->rchild!=NULL)  printf(","),Show_BTree(T->rchild);
			printf(")");
		}
	}
}
//2.哈夫曼树
//2.哈夫曼树
#include<stdio.h>
#include<stdlib.h>
#define MaxSize 100 
typedef char DataType;
typedef struct node{
	DataType Data;
	int parent;
	int weight,lchild,rchild;
}HahumanTree[MaxSize];

int n; 
void InitHaTree(HahumanTree T)
{
	int i,j;
	printf("请输入有多少个结点（100以内）");
	scanf("%d",&n);
	printf("请以a b输入结点的名字和权值：\n");
	for(i=0;i<2*n-1;i++)
	{
		T[i].lchild=T[i].rchild=T[i].parent=-1,T[i].weight=0;
	}
	for(i=0;i<n;i++)
	{
		printf("请输入第%d个结点的名字和权值：",i+1);
		scanf("\n%c %d",&T[i].Data,&T[i].weight);
//		printf("%c %d\n",T[i].Data,T[i].weight);
	}

}
void Select(HahumanTree T,int *i,int *j,int r)
{
	int k=0;
	int min1=0x3f3f3f3f ,min2=0x3f3f3f3f;
	for(k=0;k<=r;k++)
	{
		
		if(T[k].parent==-1&&min1>T[k].weight)
		{
			*i=k;
			min1=T[k].weight;
		}
	}
	for(k=0;k<=r;k++)
	{

		if(T[k].parent==-1&&min2>T[k].weight&&k!=(*i))
		{
			*j=k;
			min2=T[k].weight;
		}
	}
}
void CreateHafuTree(HahumanTree T)
{
	int p1,p2,k;
	for(k=n;k<2*n-1;k++)
	{
		Select(T,&p1,&p2,k-1);
		T[k].weight=T[p1].weight+T[p2].weight;
		T[k].lchild=p1,T[k].rchild=p2;
		T[p1].parent=T[p2].parent=k;
	}
}
void show_Tree(HahumanTree T)
{
	int i;
	printf("哈夫曼树的各边显示：");
	for(i=n;i<2*n-1;i++)
	{
		printf("<%2d,%2d>,",T[i].weight,T[T[i].lchild].weight);
		printf("<%2d,%2d>\n",T[i].weight,T[T[i].rchild].weight);
	}	
}
void hfnode(HahumanTree T,int i,int j)
{	
	j=T[i].parent;
	if(T[j].parent!=-1) hfnode(T,j,i);	
	if(T[j].lchild==i) printf("0");
	else if(T[j].rchild==i)printf("1");
}
void huffmannode(HahumanTree T)
{
	int i,j,a;
	printf("对应的权值的哈夫曼编码：");
	for(i=0;i<n;i++)
	{
		j=-1;
		a=i;
		printf("\n%c的编码为：",T[i].Data);
		hfnode(T,i,j);
		i=a;
	}
}
int main()
{
	HahumanTree T;
	InitHaTree(T);
	CreateHafuTree(T);
	show_Tree(T);
	huffmannode(T);
	return 0;
}