1.队列
特征：先进先出
顺序队列  利用一个闭圈来表示一个队列
#include<stdio.h>
#include<stdlib.h>
#define MaxSize 10
//1.定义顺序队列 
typedef int DataType;
typedef struct{
	DataType Data[MaxSize];
	int front,rear;
}SeqQueue;
//2.初始化队列
void Init_Q(SeqQueue *Q)
{
	Q->front=0,Q->rear=0;
}
//3.判断栈空 
int empty_Q(SeqQueue *Q)
{
	if(Q->front==Q->rear) return 1;
	else return 0;
}
//4.入队
void push_Q(SeqQueue *Q,DataType x)
{
	if((Q->rear+1)%MaxSize==Q->front)printf("队已满！\n");
	else
	{
		Q->Data[Q->rear]=x;
		Q->rear=(Q->rear+1)%MaxSize;
	}
}
//5.出队
void pop_Q(SeqQueue *Q,DataType *x)
{
	if(empty_Q(Q)) printf("队空，无法出栈！\n");
	else
	{
		*x=Q->Data[Q->front];
		Q->front=(Q->front+1)%MaxSize;
	}
}
//6.打印队中全元素 
void Display_Stack(SeqQueue *Q)
{
	int idx=Q->front;
	while(!empty_Q(Q))
	{
		printf("%4d ",Q->Data[Q->front]);
		Q->front=(Q->front+1)%MaxSize;
	}
	Q->front=idx;
	puts("");
}



//2.链队列
#include<stdio.h>
#include<stdlib.h>
//1.定义队列 
typedef int DataType;
typedef struct qnode{
	DataType data;
	struct qnode *next;
}LinkListQ;
typedef struct{
	LinkListQ *first,*rear;
}LinkQueue;
//2.初始化队列
LinkQueue *Init()
{
	LinkQueue *Q;
	LinkListQ *p;
	Q=(LinkQueue*)malloc(sizeof(LinkQueue));
	p=(LinkListQ*)malloc(sizeof(LinkListQ));
	Q->first=Q->rear=p;
	return Q;
}
//3.判断队空 
int emptyQueue(LinkQueue *Q)
{
	if(Q->first==Q->rear) return 1;
	else return 0;
}
//4.创建队列
void CreateQueue(LinkQueue *Q,int n)
{
	int i=0;
	LinkListQ *p;
	for(i=0;i<n;i++)
	{
		p=(LinkListQ*)malloc(sizeof(LinkListQ));
		printf("请输入第%d个结点的值：",i+1);
		scanf("%d",&p->data);
		p->next=NULL;
		Q->rear->next=p;
		Q->rear=p;
	}
}
//5.入队
void InQueue(LinkQueue *Q,DataType x)
{
	LinkListQ *p;
	p=(LinkListQ*)malloc(sizeof(LinkListQ));
	p->data=x;
	p->next=NULL;
	Q->rear->next=p;
	Q->rear=p;
}
//6.出队
int outQueue(LinkQueue *Q,int *x)
{
	LinkListQ *p;
	if(emptyQueue(Q))
	{
		printf("队空，无法出队！\n");
		return 0;
	}
	else
	{
		p=Q->first->next;
		*x=p->data;
		Q->first->next=p->next;
		if(p->next==NULL) Q->rear=Q->first;
		free(p);
		return 1;
	}
}
//7.显示所有元素的值 
void display(LinkQueue *Q)
{
	LinkListQ *p=Q->first->next;
	while(p!=NULL)
	{
		printf("%d ",p->data);
		p=p->next;
	}
	puts("");
}