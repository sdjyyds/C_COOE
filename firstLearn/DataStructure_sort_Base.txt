#include <stdio.h>
#include <stdlib.h>
/*
Date:2023-6-3
Auther:向加豪
Topic:排序的基本操作 
*/
#include<stdio.h>
#include<stdlib.h>
//插入排序：直接插入排序和希尔排序
//1.直接插入排序//注意监哨 
#define N 100010
typedef int DataType;
typedef struct {
	DataType key;
}LineList; 
void sort(LineList e[],int n)
{
	int i,j,k;
	for(i=2;i<=n;i++)
	{
		e[0]=e[i],k=i;
		for(j=i-1;j>=1;j--)
		{
			if(e[j].key>e[0].key) e[j+1]=e[j],k=j;
		}
		if(k!=i)e[k]=e[0];
	}
}

//2.希尔排序 
void XR_sort(LineList e[],int n)
{
	int i,j,k,d=n/2;
	while(d>0)
	{
		for(i=d;i<=n;i+=d)
		{
			e[0]=e[i],k=i;
			j=i-d;
			while(j>0&&e[j].key>e[0].key) e[j+d]=e[j],j-=d,k=j;
			if(k!=i) e[k]=e[0]; 
		}
		d/=2;
	}
	
}
//交换排序：冒泡排序和快速排序
//3.冒泡排序
void boubble_sort(LineList e[],int n)
{
	int j,k,i;
	for(i=1;i<n;i++)
	{   
	    int flag=1;
		for(j=1;j<n-i+1;j++)
		{
			if(e[j].key>e[j+1].key) e[0]=e[j],e[j]=e[j+1],e[j+1]=e[0],flag=0;
		}
		if(flag) break;
	}
}
//4. 快速排序 
void quick_sort(LineList e[],int l,int r)
{
	int i=l,j=r;
	e[0]=e[i];
	LineList x;
	while(i<j)
	{
	    while(e[j].key>=e[0].key&&i<j) j--;
	    e[i]=e[j];
		while(e[i].key<=e[0].key&&i<j) i++;
		e[j]=e[i];
	}
	e[i]=e[0];
	if(i-l>1)quick_sort(e,l,i-1);
	if(r-i>1)quick_sort(e,i+1,r);
}
//选择排序：直接选择排序和堆排序
//5.直接选择排序
void direct_sort(LineList e[],int n)
{
	int i,j,k;
	for(i=1;i<n;i++)
	{
		k=i;
		for(j=i+1;j<=n;j++)
		{
			if(e[j].key>e[k].key) k=j;
		}
		if(k!=i)
		{
			e[0]=e[i];
			e[i]=e[k];
			e[k]=e[0];
		}
	}
}
//6.堆排序 
void sift(LineList e[],int l,int r)
{
	int i=l,j=2*i;
	e[0]=e[i];
	while(j<=r)
	{    
		if(j<r&&e[j].key>e[j+1].key) j=j+1;
		if(e[i].key>e[j].key)
		{
			e[i]=e[j];
			i=j;
			j=2*i;
		}
		else break;
		e[i]=e[0];
	}	

}
void Dui_Sort(LineList e[],int n)
{
	int i=n/2,j,k;
	while(i>=1)
	{
		sift(e,i,n);
		i--;
	}
	for(i=n;i>=1;i--)
	{
		e[0]=e[1];
		e[1]=e[i];
		e[i]=e[0];
		sift(e,1,i-1);
	}
}
//7.归并排序
int ans[N],a[N];
void merge_sort(int a[],int l,int r)
{
	if(l>=r) return;
	int mid=(l+r)/2;
	merge_sort(a,l,mid),merge_sort(a,mid+1,r);
	int i=l,j=mid+1,k=0;
	while(i<=mid&&j<=r)
	{
		if(a[i]<=a[j]) ans[k++]=a[i++];
		else ans[k++]=a[j++];
	}
	while(i<=mid) ans[k++]=a[i++];
	while(j<=r) ans[k++]=a[j++];
	for(i=0,j=l;j<=r;j++,i++) a[j]=ans[i];
}
int main(int argc, char *argv[])
{
	int n,i,j;
	LineList e[N];
	scanf("%d",&n);
	for(i=1;i<=n;i++)
	{
		scanf("%d",&e[i].key);
		a[i]=e[i].key;
	}

//	7
//    -9 8 -10 2 3 37 4
    //1.直接插入排序
	sort(e,n);
	for(i=1;i<=n;i++) e[i].key=a[i];
	printf("冒泡排序: \n"); 
	for(i=1;i<=n;i++) printf("%d ",e[i].key);
	puts("");
	//2.希尔排序 
	XR_sort(e,n);
	printf("希尔排序：\n");
	for(i=1;i<=n;i++) e[i].key=a[i];
	for(i=1;i<=n;i++) printf("%d ",e[i].key);
	puts("");
	//3.冒泡排序 
	boubble_sort(e,n);
	printf("冒泡排序：\n");
	for(i=1;i<=n;i++) e[i].key=a[i];
	for(i=1;i<=n;i++) printf("%d ",e[i].key);
	puts("");
	//4.快速排序 
	quick_sort(e,1,n);
	printf("快速排序：\n");
	for(i=1;i<=n;i++) e[i].key=a[i];
	for(i=1;i<=n;i++) printf("%d ",e[i].key);
    puts("");
	//5.直接选择排序 
	direct_sort(e,n);
	printf("直接选择排序：\n");
    for(i=1;i<=n;i++) e[i].key=a[i];
    for(i=1;i<=n;i++) printf("%d ",e[i].key);
    puts("");
	//6.堆排序 
	Dui_Sort(e,n);
	printf("堆排序：\n");
    for(i=1;i<=n;i++) e[i].key=a[i];
	for(i=1;i<=n;i++) printf("%d ",e[i].key);
    puts("");
	//7.归并排序 
	merge_sort(a,1,n);
	printf("归并排序：\n");
	for(i=1;i<=n;i++) printf("%d ",a[i]);
	return 0; 
}