#include <stdio.h>
#include <stdlib.h>

/* 
Date:2023-4-15
Auther:向加豪
Topic:顺序串的基本操作 
*/
//（1）定义顺序串
#define MaxSize 100
typedef struct{
	char Data[MaxSize];
	int len;
}String;
// 求字符串长度
int GetSLen(String *S)
{
	int i=0;
	while(S->Data[i]!='\0') i++;
	return i;
} 
//（2）串的初始化-给串赋值
String *InitS()
{
	printf("请输入字符串\n");
	//getchar();
	String *S;
	S=(String*)malloc(sizeof(String));
	gets(S->Data);
	S->len=GetSLen(S);
	return S; 
}
//（3）显示串
void ShowString(String *S)
{
	int i=0;
	while(S->Data[i]!='\0') printf("%c",S->Data[i]),i++;
	printf("\n"); 
}
//（4）求子串
int GetSonString(String *S,String *E,int pos,int x)
{
	if(pos<1&&pos>S->len&&x>S->len-pos+1)
	{
		printf("查找错误\n");
		return 0;
	}
	else
	{
		int i;
		for(i=0;i<x;i++) E->Data[i]=S->Data[pos-1+i];
		E->Data[x]='\0';
		E->len=x;
		return 1;
	}
}
//（5）串的定位
int LocString(String *S,String *E)
{
	int i=0,j=0;
	while(S->Data[i]!='\0'&&E->Data[j]!='\0')
	{
		if(S->Data[i]==E->Data[j]) i++,j++;
		else i=i-j+1,j=0;
	}
	if(E->Data[j]=='\0') return i-j+1;
	else return -1;
}
//（6）串的复制
int CopyString(String *S,String *E)
{
	int i=0;
	while(i<=S->len)
	{
		E->Data[i]=S->Data[i];
		i++;
	}
	E->len=S->len;
}
//（7）串的连接
int LinkString(String *S,String *E)
{
	int i,flag;
	if(S->len+E->len<=MaxSize)
	{
	    for(i=S->len;i<S->len+E->len;i++)
	    {
	    	S->Data[i]=E->Data[i-S->len];
		}
		S->Data[i]='\0';
		flag=1;
	}
	else if(S->len<MaxSize)
	{
		for(i=S->len;i<MaxSize;i++) S->Data[i]=E->Data[i-S->len];
		S->Data[i]='\0';
		S->len=MaxSize;
		flag=0;
	}
	else
	{
		flag=0;
	}
	return flag;
}
//（8）串的替换
int ReplaceString(String *S,String *E,String *V)
{
	int i,m,n,q;
	m=S->len;
	n=E->len;
	q=V->len;
	int p=1;
	do
	{
		i=LocString(S,E);
		if(i!=-1)
		{
			int j;
		    for(j=i;j<=q;j++) S->Data[j-1]=V->Data[j-i];
		    p=i+q;
			S->len+=(q-n);
		    n=S->len;
		}
	}while((p<=n-m+1)&&i!=-1);
}
//（9）删除子串
int StringDelete(String *S,int i,int l)
{
	int k;
	if(i+l-1>S->len)
	{
		printf("所要删除的字串超界！\n");
		return 0;
	}
	else
	{
		for(k=i;k<=S->len;i++) S->Data[i-1]=S->Data[i+l-1];
		S->len=S->len-l;
		S->Data[S->len]='\0';
		return 1;
	}
}

//（10）判断两个串相等
int StringCompare(String *S,String *E)
{
	int i=0,j=0,flag=0;
	while(S->Data[i]!='\0'&&E->Data[i]!='\0')
	{
		if(S->Data[i]!=E->Data[i]) 
		{
			flag=1;
			break;
	    }
		else i++;
	}
	if(flag==0&&S->len==E->len) return 0;
	else return S->Data[i]-E->Data[i];
}
int main(int argc, char *argv[]) {
	//1.定义串 
	String *S,*E,*V;
	E=(String*)malloc(sizeof(String));
	V=(String*)malloc(sizeof(String));
	//2.初始化 
	S=InitS();
	//E=InitS();
	//3.显示串
	ShowString(S);
	//4.求字串 
	GetSonString(S,E,2,3);
	ShowString(E);
	//5.串的定位
	printf("%d\n",LocString(S,E));
	//6.串的复制
	CopyString(S,E);
	ShowString(E);
	//7.串的连接
	LinkString(S,E);
	ShowString(S);
	//8.串的替换
	V=InitS();
	ReplaceString(S,E,V);
	ShowString(S);
	//9.删除字串
	StringDelete(S,1,3);
	ShowString(S);
	//10.判断两个串是否相等
	printf("两串是否相等%s\n",StringCompare(S,E)?"NO":"YES");
	return 0;
}