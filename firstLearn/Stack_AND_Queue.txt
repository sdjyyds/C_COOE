#define _CRT_SECURE_NO_WARNINGS 1
#include"functionDefine.h"
//const int N = 100010;
//typedef int DataType;
//1.顺序栈

//1.1定义顺序栈
//typedef struct {
//	DataType data[N];
//	int length;
//}SeqStack;
//1.2初始化顺序栈
void InitSeqStack(SeqStack& S)
{
	S.top = -1;
}
int SeqStackEmpty(SeqStack& S)
{
	if (S.top == -1) return 1;
	else return 0;
}
int SeqStackFull(SeqStack& S)
{
	if (S.top == N - 1) return 1;
	else return 0;
}
//1.3创建顺序栈
void CreateSeqStack(SeqStack& S, int n)
{
	for (int i = 0; i < n; i++)
	{
		printf("请输入第%d个元素值的值：", i + 1);
		scanf("%d", &S.data[i]);
	}
	S.top = n-1;
}
//1.4入栈
void SeqStackPush(SeqStack& S, DataType x)
{
	if (SeqStackFull(S))
	{
		printf("栈满！无法入栈！\n");
	}
	else
	{
		S.top++;
		S.data[S.top] = x;
		printf("入栈成功！\n");
	}
}
//1.5出栈
void SeqStackPop(SeqStack& S)
{
	if (SeqStackEmpty(S)) printf("栈空！无法出栈！\n");
	else
	{
		S.top--;
		printf("出栈成功！\n");
	}

}
//1.6输出栈中所有元素
void DisplaySeqStack(SeqStack& S)
{
	for (int i = 0; i <= S.top; i++) printf("%d ", S.data[i]);
	puts("");
}
//1.7显示栈顶元素
void DisplayTopElement(SeqStack& S)
{
	if (SeqStackEmpty(S)) printf("栈空！无栈顶元素！\n");
	else printf("%d\n", S.data[S.top]);
}


//2.链栈
//2.1初始化链栈
LinkStack *InitLinkStack()
{
	LinkStack *L=NULL;
	return L;
}
//2.2构建链栈
LinkStack* CtreateLinkStack(LinkStack *L, int n)
{
	LinkStack* p;
	for (int i = 0; i < n; i++)
	{
		printf("请输入第%d个元素的值：", i+1);
		p = (LinkStack*)malloc(sizeof(LinkStack));
		scanf("%d", &p->data1);
		p->next = L;
		L =p;
	}
	return L;
}
//2.3入栈
LinkStack* LinkStackPush(LinkStack *L,DataType data)
{
	LinkStack* p = (LinkStack*)malloc(sizeof(LinkStack));
	p->data1 = data;
	p->next = L;
	L = p;
	printf("入栈成功！\n");
	return L;
}
//2.4出栈
LinkStack* LinkStackPop(LinkStack *L)
{
	if (L == NULL) printf("栈空，无法出栈！\n");
	else
	{
		LinkStack* p = L;
		L = p->next;
		free(p);
		printf("出栈成功！\n");
	}
	return L;
}
//2.5输出栈中所有元素
void PrintAllLinkStack(LinkStack *L)
{
	LinkStack* p = L;
	while (p != NULL)
	{
		printf("%d ", p->data1);
		p = p->next;
	}
	puts("");
}
//2.6打印栈顶元素
void PrintLinkStackTop(LinkStack* L)
{
	if (L == NULL) printf("栈空！无栈顶元素！\n");
	else printf("%d\n", L->data1);
}
//3.循环队列

//3.1初始化循环队列
void InitQ(Queue &Q)
{
	Q.front = 0, Q.rear =0;
	printf("初始化成功！\n");
}
//3.2创建循环队列
void CreateQ(Queue &Q,int n)
{
	if (n > N) printf("无法构建，队列空间不够！\n");
	else {
		for (int i = 0; i < n; i++)
		{

			Q.rear = (Q.rear + 1) % N;
			printf("请输入第%d个数的值：", i + 1);
			scanf("%d", &Q.data[Q.rear]);
		}
	}
}
//3.3入队
void QPush(Queue &Q, DataType data)
{
	int rear = (Q.rear + 1) % N;
	if (rear == Q.front)printf("队满！无法入队!\n");
	else
	{
		Q.rear = (Q.rear + 1) % N;
		Q.data[Q.rear] = data;
		printf("入队成功！\n");
	}
}
//3.4出队
void QPop(Queue &Q)
{
	if (Q.front == Q.rear) printf("队空！无法出队！\n");
	else
	{
		Q.front = (Q.front + 1) % N;
		printf("出队成功！\n");
	}
}
//3.5打印所有的元素
void PrintAllNode(Queue &Q)
{
	int front = Q.front,rear=Q.rear;
	while (front != rear)
	{
		front = (front + 1) % N;
		printf("%d ", Q.data[front]);
	}
	puts("");
}
//3.6打印队头元素
void PrintFrontNode(Queue &Q)
{
	if (Q.front == Q.rear)printf("队空！无队首元素！\n");
	else
	{
		int front = (Q.front + 1) % N;
		printf("%d\n", Q.data[front]);
	}
}

//4.链队
//4.1初始化链队
LinkQueue* InitLinkQueue()
{
	LinkListQ* p = (LinkListQ*)malloc(sizeof(LinkListQ));
	LinkQueue* Q = (LinkQueue*)malloc(sizeof(LinkQueue));
	Q->front = Q->rear= p;
	return Q;
}
int LinkQueueEmpty(LinkQueue *Q)
{
	if (Q->front == Q->rear) return 1;
	else return 0;
}
//4.2创建链队
void CreateLinkQueue(LinkQueue* Q, int n)
{
	LinkListQ* p;
	for (int i = 0; i < n; i++)
	{
		printf("请输入第%d的结点信息：", i + 1);
		p = (LinkListQ*)malloc(sizeof(LinkListQ));
		scanf("%d", &p->data);
		p->next = NULL;
		Q->rear->next = p;
		Q->rear = p;
	}
}
//4.3入队
void PushLinkQueue(LinkQueue* Q, DataType data)
{
	LinkListQ* p = (LinkListQ*)malloc(sizeof(LinkListQ));
	p->data = data;
	p->next = NULL;
	Q->rear->next = p;
	Q->rear = p;
	printf("入队成功！\n");
}
//4.4出队
void PopLinkQueue(LinkQueue* Q)
{
	if (LinkQueueEmpty(Q))printf("队空！无法出队！\n");
	else
	{
		LinkListQ* p = Q->front->next;
		Q->front->next = p->next;
		if (p->next == NULL)Q->rear = Q->front;
		printf("出队成功！\n");
	}
}
//4.5输出队首元素
void DisplayLinkQueueF(LinkQueue *Q)
{
	if (LinkQueueEmpty(Q)) printf("队空！无队首元素！\n");
	else printf("%d\n", Q->front->next);
}
//4.6输出全部队列元素
void DisplayAllNode(LinkQueue* Q)
{
	LinkListQ* p = Q->front;
	while (p->next != NULL)
	{
		printf("%d ", p->next->data);
		p = p->next;
	}
	puts("");
}