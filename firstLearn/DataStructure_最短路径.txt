#include <stdio.h>
#include <stdlib.h>

/*
Date:2023-5-21
Author:向加豪
Topic:最短路径算法 
*/
#define M 100010
const int N=110;
//1.构建邻接矩阵
int Create_Near_A(int s[][N])
{
	int n,e,i,j;
	printf("请输入顶点的个数和边的个数：");
	scanf("%d%d",&n,&e);
	for(i=0;i<n;i++)
	{
		for(j=0;j<n;j++) s[i][j]=M;
	}
	for(i=0;i<e;i++)
	{
		int a,b,w;
		printf("请输入对应边的关系：（以a b w的方式进行输入）");
		scanf("%d %d %d",&a,&b,&w);
		s[a][b]=w;
	}
	printf("构建成功！\n");
	return n;
}
//2.最短路径算法 
The_Shortest_Path(int s[][N],int n,int vi)
{
	int i,j,k,visited[N],path[N],cost[N];
	for(i=0;i<n;i++) 
	{
		visited[i]=0,cost[i]=s[vi][i];
		if(s[vi][i]<M) path[i]=vi;
		else path[i]=-1;
	}
	visited[vi]=-1, path[vi]=0,cost[vi]=0;
	for(i=0;i<n;i++)
	{
		int min=M,u=-1;
		for(j=0;j<n;j++)
		{
			if(visited[j]==0&&min>cost[j]) min=cost[j],u=j;
		}
		if(u!=-1)
		{
			visited[u]=1;
			for(k=0;k<n;k++)
			{
				if(visited[k]==0&&cost[k]>s[u][k]+cost[u]&&s[u][k]<M)
				{
					cost[k]=s[u][k]+cost[u];
					path[k]=u;
				}
			}
		}
	}
	printf("\n缔结克斯算法：\n");
	for(i=0;i<n;i++)
	{
		if(i!=vi)
		{
			printf("(%d,%d),",vi,i);
			if(visited[i]==1)
			{
				k=i;
				printf("此路径的长度为：%d ",cost[i]);
				printf("逆路径为：");
				printf("%d--->",k);
				while(path[k]!=vi)
				{
					printf("%d--->",path[k]);
					k=path[k];
				}
				printf("%d",vi);
			}
			else
			{
				printf("无此路径存在");
			}
			puts("");
		}
	}
}
int main(int argc, char *argv[]) {
	//1.构建s数组
	int s[N][N],n;
	//2.构建s数组
	n=Create_Near_A(s); 
	//3.缔结克斯算法
	The_Shortest_Path(s,n,0); 
	return 0;
}