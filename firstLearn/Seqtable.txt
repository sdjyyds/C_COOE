#include<stdio.h>
#include<stdlib.h>
typedef int DataType;
const int N=100010;
//1.顺序表
//1.1定义顺序表 
typedef struct{
	DataType Data[N];
	int length; 
}SeqList;
//1.2初始化顺序表
void InitList(SeqList *L)
{
	L->length=0;
}
//1.2建立顺序表
void CreateList(SeqList *L,int n)
{
	int i,x;
	for(i=0;i<n;i++){
		printf("请输入第%d个数：",i+1);
		scanf("%d",&L->Data[i]);
	}
	L->length=i; 
}
//1.3输出顺序表
void displaySL(SeqList *L)
{
	int i;
	for(i=0;i<L->length;i++) printf("%d ",L->Data[i]);
	puts("");
}
//1.4按值查找
int SearchValueSL(SeqList *L,int x)
{
	int i;
	int l=0,r=L->length-1;
	while(l<r){
		int mid=(l+r)/2;
		if(L->Data[mid]>=x) r=mid;
		else l=mid+1;
	}
	if(L->Data[l]==x)
	{
		printf("值为%d的在其中的排行为：%d\n",x,l+1);
		return l;
	}
	else printf("无此元素！\n"); 
	return -1;
}
//1.5按序查找
int SearchOrderSL(SeqList *L,int k)
{
	if(k<1||k>L->length)
	{
		printf("无此排行的元素！\n");
		return -1;
	} 
	else printf("序号为%d的值为：%d\n",k,L->Data[k-1]);
	return L->Data[k-1];
}
//1.7增加元素 
void AddElementSL(SeqList *L,int k,int x)
{
	int i;
	if(k<1||k>L->length+1) printf("无此位置，无法插入！\n");
	else if(k==L->length+1)
	{
		L->Data[k-1]=x;
		L->length++;
	}
	else
	{
		for(i=L->length;i>=k-1;i--) L->Data[i]=L->Data[i-1];
		L->Data[k-1]=x;
		L->length++;
	} 
}
//1.8排序 
void sortSL(SeqList *L,int l,int r)
{
	if(l>=r) return;
	int i=l-1,j=r+1,x=L->Data[l];
	while(i<j)
	{
		do i++;while(L->Data[i]<x);
		do j--;while(L->Data[j]>x);
		if(i<j)
		{
			int tmp=L->Data[i];
			L->Data[i]=L->Data[j];
			L->Data[j]=tmp;
		}
	}
	sortSL(L,l,j),sortSL(L,j+1,r);
}
//1.9删除元素
void deleteElementSL(SeqList *L,int x)
{
	int k=SearchValueSL(L,x),i;
	if(k==-1)
	{
		printf("无此元素，删除错误！\n");
	}
	else
	{
		for(i=k+1;i<L->length;i++) L->Data[i-1]=L->Data[i];
		L->length--;
	}
} 
//2.单链表
//2.1定义单链表 
typedef struct node1{
	DataType data;
	struct node1 *next;
}LinkList;
//2.2创建单链表
LinkList *InitLList()
{
	LinkList *head1;
	head1=(LinkList*)malloc(sizeof(LinkList));
	head1->next=NULL;
}
//2.2.1头插创建法
void CreateLListH(LinkList *head1,int n)
{
	int i;
	int x;
	LinkList *p;
	for(i=0;i<n;i++)
	{
		printf("请输入第%d个数：",i+1);
		p=(LinkList*)malloc(sizeof(LinkList));
		scanf("%d",&x);
		p->data=x;
		p->next=head1->next;
		head1->next=p; 
	}
} 
//2.2.2尾插创建法 
void CreateLListR(LinkList *head1,int n)
{
	int i,k;
	int x;
	LinkList *p,*rear=head1;
	for(i=0;i<n;i++)
	{
		printf("请输入第%d个数：",i+1);
		p=(LinkList*)malloc(sizeof(LinkList));
		scanf("%d",&x);
		p->data=x;
		p->next=NULL;
		rear->next=p;
		rear=p;
	}
}
int GetLengthLList(LinkList *head1)
{
	int j=0;
	LinkList *p=head1;
	while(p)
	{
		p=p->next;
		j++;
	}
	return j;
}
//2.3单链表插入元素
void InsertLListH(LinkList *head1,int k,DataType x)
{
	if(k<=0||k>GetLengthLList(head1)) printf("插入的位置不合法！\n");
	else
	{
		int j=0;
		LinkList *p,*s=head1;
		while(s!=NULL&&j+1<k)
		{
			s=s->next;
			j++;
		}
		if(s!=NULL&&j+1==k)
		{
			p=(LinkList*)malloc(sizeof(LinkList));
			p->data=x;
			p->next=s->next;
			s->next=p;
			printf("在序号为 %d 上插入元素 %d 成功！\n",k,x);
		}
		else printf("插入的位置不存在！\n");
	}
	
}
//2.4单链表删除元素
//2.4.1 按值删除 
void deleteElementLList(LinkList *head1,DataType x)
{
	LinkList *p=head1,*s;
	while(p->next!=NULL&&p->next->data!=x) p=p->next;
	if(p->next!=NULL)
	{
		s=p->next;
		p->next=s->next;
		free(s);
		printf("删除值为%d的元素成功！\n",x);
	}
	else printf("无此元素,无法删除！\n");
}
//2.4.2 按序删除 
void deleteOrderLList(LinkList *head1,int k)
{
	if(k<=0||k>GetLengthLList(head1)) printf("插入的位置不合法！\n");
	else
	{
		LinkList *p=head1,*s;
		int j=0; 
		while(p!=NULL&&j!=k-1)
		{
			p=p->next;
			j++;
		}
		if(p!=NULL)
		{
			s=p->next;
			p->next=s->next;
			free(s);
			printf("删除序号为%d的元素成功！\n",k);
		}
		else printf("输入不合法！\n");
	}
}
//2.5单链表查找元素
void SearchElementLList(LinkList *head1,int k)
{
	LinkList *p=head1->next;
	int j=1;
	if(k<=0||k>GetLengthLList(head1)) printf("插入的位置不合法！\n");
	else
	{
		while(j<k&&p!=NULL) p=p->next,++j;
		if(p!=NULL)
		{
			printf("%d\n",p->data);
		}
	}
}
//2.6 显示单链表中所有元素
void DisplayAElementLList(LinkList *head1)
{
	LinkList *p=head1->next;
	while(p)
	{
		printf("%d ",p->data);
		p=p->next;
	}
	puts("");
} 
//3.循环单链表
//3.1定义循环单链表 
typedef struct node2{
	DataType data;
	struct node2 *next;
}XunLinkList;
//3.2创建循环单链表
XunLinkList*InitXLList()
{
	XunLinkList *head2;
	head2=(XunLinkList*)malloc(sizeof(XunLinkList));
	head2->next=head2;
	return head2;
}
void CreateXunLinkListH(XunLinkList *head2,int n)
{
	XunLinkList *p;
	DataType x;
	int t=n;
	while(n--)
	{
		p=(XunLinkList*)malloc(sizeof(XunLinkList));
		printf("请输入第%d个数：",t-n);
		scanf("%d",&p->data);
		p->next=head2->next;
		head2->next=p;
	}
}
void CreateXunLinkListR(XunLinkList *head2,int n)
{
	XunLinkList *p,*rear=head2;
	int t=n;
	while(n--)
	{
		p=(XunLinkList*)malloc(sizeof(XunLinkList));
		printf("请输入第%d个数：",t-n);
		scanf("%d",&p->data);
		p->next=rear->next;
		rear->next=p;
		rear=p;
	}
}
int GetXunLinkListLength(XunLinkList *head2)
{
	int j=0;
	XunLinkList *p=head2->next;
	while(p!=head2)
	{
		p=p->next;
		j++;
	}
	return j;
} 
//3.3循环单链表插入元素
void InsertXLList(XunLinkList *head2,int k,DataType x)
{
	if(k>GetXunLinkListLength(head2)||k<=0) printf("不存在此位置，无法插入！\n");
	else
	{
		int j=1;
		XunLinkList *s=head2->next,*p;
		while(s!=head2&&j+1<k)
		{
			s=s->next;
			j++;
		}
		if(s!=head2)
		{
			p=(XunLinkList*)malloc(sizeof(XunLinkList));
			p->data=x;
			p->next=s->next;
			s->next=p;
			printf("在序号为 %d 的位置上成功插入值为 %d 的元素！\n",k,x);
		}
		else printf("输入序号%d不在循环单链表中！\n",k);
	}
}
//3.4循环单链表删除元素
///3.4.1循环单链表按值删除 
void DeleteElementXLList(XunLinkList *head2,DataType x)
{
	XunLinkList *p=head2,*s;
	while(p->next->data!=x&&p->next!=head2) p=p->next;
	if(p->next!=NULL)
	{
		s=p->next;
		p->next=s->next;
		free(s);
		printf("删除元素值为%d的元素成功！\n",x);
	}
	else printf("无值为%d的元素！\n",x);
}
//3.4.2循环单链表按序删除 
void  DeleteOrderXLList(XunLinkList *head2,int k)
{
	if(k>GetXunLinkListLength(head2)||k<=0) printf("不存在此位置，无法删除！\n");
	else
	{
		int j=1;
		XunLinkList *s=head2->next,*p;
		while(s!=head2&&j+1<k)
		{
			s=s->next;
			j++;
		}
		if(s!=head2)
		{
			p=s->next;
			s->next=p->next;
			free(p);
			printf("删除序号为%d的元素成功！\n",k); 
		}
		else
		{
			printf("无序号%d，无法删除！\n",k);
		}
	}
}
//3.5循环单链表查找元素
void SearchElementXLList(XunLinkList *head2,DataType x)
{
	int j=1;
	XunLinkList *p=head2->next;
	while(p!=head2&&p->data!=x)
	{
		p=p->next;
		j++;
	}
	if(p!=head2) printf("值为%d的元素在循环单链表的位置为：%d\n",x,j);
	else printf("无此元素!\n"); 
}
//3.6输出循环单链表的所有值 
void DisplayXLList(XunLinkList *head2)
{
	XunLinkList *p=head2->next;
	while(p!=head2)
	{
		printf("%d ",p->data);
		p=p->next;
	}
	puts("");
}


//4.循环双链表
//4.1定义循环双链表 
typedef struct node3{
	DataType data;
	struct node3 *rear,*prior;
}XunDuLinkList;
//4.2创建循环双链表
XunDuLinkList* InitXunDULinkList()
{
	XunDuLinkList *XDLL=(XunDuLinkList*)malloc(sizeof(XunDuLinkList));
	XDLL->data=NULL;
	XDLL->prior=XDLL->rear=XDLL;
	return XDLL;
}
//4.3循环双链表插入元素
void InsertXDLList(XunDuLinkList *p,DataType x)
{
	XunDuLinkList *s=(XunDuLinkList*)malloc(sizeof(XunDuLinkList));
	s->data=x;
	s->rear=p->rear;
	p->rear->prior=s;
	s->prior=p;
	p->rear=s;
}
void createXDLList(XunDuLinkList *p,int n)
{
	DataType x;
	XunDuLinkList *rear=p;
	for(int i=1;i<=n;i++)
	{
		printf("请输入第%d的元素的值：",i);
		scanf("%d",&x);
		InsertXDLList(rear,x);
		rear=rear->rear;
	}
}
int getLengthXDLList(XunDuLinkList *XDLL)
{
	int j=0;
	XunDuLinkList *p=XDLL->rear;
	while(p!=XDLL)
	{
		j++;
		p=p->rear;
	}
	return j;
}
//4.4循环双链表删除元素
void DeleteElementXDLList(XunDuLinkList *XDLL,int k)
{
	if(XDLL->prior==XDLL->rear) printf("双链表为空，无法删除！\n");
	else if(k<=0||k>getLengthXDLList(XDLL))
	{
		printf("无第%d个元素！",k);
	}
	else
	{
		int j=1;
		XunDuLinkList *p=XDLL->rear;
		while(p!=XDLL&&j<k)
		{
			j++;
			p=p->rear;
		}
		p->prior->rear=p->rear;
		p->rear->prior=p->prior;
		printf("删除第%d上的值为%d的元素成功！\n",k,p->data);
		free(p);
	} 
}
//4.5循环双链表查找元素
void SearchElementXDLList(XunDuLinkList *XDLL,int x)
{
	if(XDLL->rear==XDLL->prior) printf("循环双链表为空！\n");
	else
	{
		int j=1;
		XunDuLinkList *p=XDLL->rear;
		while(p!=XDLL&&p->data!=x)
		{
			p=p->rear;
			j++;
		}
		if(p->data==x)
		{
			printf("元素值为%d在循环双链表的位置为：%d\n",x,j);
		}
		else
		{
			printf("循环双链表中无值为%d的元素！\n",x);
		}
	}
}
//4.6输出循环双链表的值
void DisplayDLList(XunDuLinkList *XDLL)
{
	XunDuLinkList *p=XDLL->rear;
	while(p->data!=NULL)
	{
		printf("%d ",p->data);
		p=p->rear;
	}
	puts("");
} 
int main()
{
	//1.顺序表的一系列操作
//	SeqList L;
//	InitList(&L);
//	CreateList(&L,10);
//	displaySL(&L);
//	SearchValueSL(&L,10);
//	SearchOrderSL(&L,1);
//	AddElementSL(&L,2,5);
//	displaySL(&L);
//	sortSL(&L,0,L.length-1);
//	displaySL(&L);
//	SearchValueSL(&L,10);
//	SearchOrderSL(&L,1);
//	deleteElementSL(&L,5);
//	displaySL(&L);

//2.创建单链表 
//	LinkList *head1=InitLList();
//	CreateLListR(head1,10);
//	DisplayAElementLList(head1);
//	InsertLListH(head1,2,5);
//	DisplayAElementLList(head1);
//	deleteElementLList(head1,5);
//	DisplayAElementLList(head1);
//	deleteOrderLList(head1,3);
//	DisplayAElementLList(head1);
//	SearchElementLList(head1,3);

//3.创建循环单链表
//	XunLinkList *head2=InitXLList();
//	CreateXunLinkListR(head2,10);
//	//CreateXunLinkListH(head2,10);
//	DisplayXLList(head2);
//	InsertXLList(head2,3,5);
//	DisplayXLList(head2);
//	DeleteElementXLList(head2,5);
//	DisplayXLList(head2);	 
//	DeleteOrderXLList(head2,5);
//	DisplayXLList(head2);
//	SearchElementXLList(head2,5);
//4.创建循环双链表
	XunDuLinkList *DXLL=InitXunDULinkList();
	createXDLList(DXLL,10);
	DisplayDLList(DXLL);
	printf("%d\n",getLengthXDLList(DXLL));SearchElementXDLList(DXLL,10);		
	DeleteElementXDLList(DXLL,5);
	DisplayDLList(DXLL);	 
	return 0;
}
